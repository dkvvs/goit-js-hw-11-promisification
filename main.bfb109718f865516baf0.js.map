{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js","webpack:///./index.js"],"names":["delayExec","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","usersActiv","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","transactionId","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","object","logError","warn","amount","catch"],"mappings":"sHAkBeA,MAlBf,WACE,IAAMC,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,MAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,I,8BCQJK,MAvBf,WACE,IAAMC,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAAAC,GAIjBA,EAHqBY,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7Db,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAE7CL,EAAgBH,EAAO,SAASF,KAAKJ,GACrCS,EAAgBH,EAAO,OAAOF,KAAKJ,ICiBtBgB,MArCf,WACE,IAIMC,EAAkB,SAAAC,GACtB,OAAO,IAAIrB,SAAQ,SAACC,EAASqB,GAC3B,IAN+BC,EAAKC,EAM9B1B,GANyByB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDrB,YAAW,WACUuB,KAAKE,SAAW,GAGjC1B,EAAQ,CAAE2B,GAAIP,EAAYO,GAAI9B,MAAOA,IAErCwB,EAAOD,EAAYO,MAEpB9B,OAID+B,EAAa,SAAAC,GACjBzB,QAAQC,IAAR,eAA2BwB,EAAOF,GAAlC,iBAAqDE,EAAOhC,MAA5D,OAGIiC,EAAW,SAAAH,GACfvB,QAAQ2B,KAAR,gCAA6CJ,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAO1B,KAAKsB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAO1B,KAAKsB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAAM1B,KAAKsB,GAAYK,MAAMH,GAE/DX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAO1B,KAAKsB,GAAYK,MAAMH,IC5BlElC,IACAW,IACAW,M","file":"main.bfb109718f865516baf0.js","sourcesContent":["function delayExec() {\r\n  const delay = ms => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n  // Вызовы функции для проверки\r\n  delay(4500).then(logger); // Resolved after 1500ms\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n}\r\n\r\nexport default delayExec;\r\n","function usersActiv() {\r\n  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n      resolve(updatedUsers);\r\n    });\r\n  };\r\n\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n}\r\n\r\nexport default usersActiv;\r\n","function transactionId() {\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = transaction => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n          resolve({ id: transaction.id, delay: delay });\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const logSuccess = object => {\r\n    console.log(`Transaction ${object.id} processed in ${object.delay}ms`);\r\n  };\r\n\r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n}\r\n\r\nexport default transactionId;\r\n","// import './styles.css';\n\nimport delayExec from './js/task-01';\nimport usersActiv from './js/task-02';\nimport transactionId from './js/task-03';\n\ndelayExec();\nusersActiv();\ntransactionId();\n"],"sourceRoot":""}